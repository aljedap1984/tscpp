# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
# Logging settings.
logging:

  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level:  
  # config application
    com.transoft.completeair.apigateway: DEBUG
  # Logger-specific levels.
  loggers:

    # Redirects SQL logs to a separate file
    org.hibernate.SQL: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG

# Define the port where the API gateway server would be running
server:
  port: 8765
#spring:
  #application:
    #name: api-gateway
  #config:
    #name: api-gateway
#spring.mvc.dispatch-options-request=true
# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that
# Spring cloud security would need to secure the api gateway before it can route the
# requests using zuul
zuul.host.connect-timeout-millis: 65000
zuul.host.socket-timeout-millis: 65000
#zuul:
  #host:
    #connect-timeout-millis: 5000
    #socket-timeout-millis: 10000
#
#hystrix:
  #command:
    #default:
      #execution:
        #isolation:
          #thread:
            #timeoutInMilliseconds: 65000
          #semaphore:
            #maxConcurrentRequests: 20
endpoints:
  restart:
    enabled: true
  shutdown:
    enabled: true
  health:
    sensitive: false
#
zuul:
  #sensitive-headers: Cookie,Set-Cookie,Authorization
  #ignored-services: '*'
  #ignoredPatterns: /**/api/**
  routes:
    config-general:
      path: /configg/**
      serviceId: config-general
      url: http://localhost:8083
    flight-control:
      path: /flightc/**
      serviceId: flight-control
      url: http://localhost:8081
    #complete-air: /complui/**
    fare-control:
      path: /farec/**
      serviceId: fare-control
      url: http://localhost:8085
    mrn:
      path: /mrn/**
      serviceId: mrn
      url: http://localhost:8086
    pnr:
      path: /pnr/**
      serviceId: pnr
      url: http://localhost:8087
    sales:
      path: /sales/**
      serviceId: sales
      url: http://localhost:8088
    finance:
      path: /finance/**
      serviceId: finance
      url: http://localhost:8089
    oauth-service:
      #sensitiveHeaders:
      path: /oauth/**
      serviceId: oauth-service
      #stripPrefix: false	  
      url: http://localhost:9999
  addProxyHeaders: true
#
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 99000
#hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests: 20

hystrix:
  command:
    myclient:
      coreSize: 3
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 1
    default:
      coreSize: 20
      maximumSize: 500
      allowMaximumSizeToDivergeFromCoreSize: true
      maxQueueSize: 50000
      queueSizeRejectionThreshold: 50000
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 1000000
# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    metadataMap:
      instanceId: ${spring.application.name}:${server.port}
